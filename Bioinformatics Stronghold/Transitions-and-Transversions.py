def transition_transversion_ratio(s1, s2):
    # Define purines (A, G) and pyrimidines (C, T)
    transitions = [('A', 'G'), ('G', 'A'), ('C', 'T'), ('T', 'C')]
    transversions = [('A', 'C'), ('A', 'T'), ('G', 'C'), ('G', 'T'),
                     ('C', 'A'), ('C', 'G'), ('T', 'A'), ('T', 'G')]

    transition_count = 0
    transversion_count = 0

    # Compare the DNA strings s1 and s2 positionally
    for base1, base2 in zip(s1, s2):
        if base1 != base2:
            if (base1, base2) in transitions:
                transition_count += 1
            elif (base1, base2) in transversions:
                transversion_count += 1

    # Calculate the ratio
    if transversion_count == 0:
        return float('inf')  # Avoid division by zero if no transversions
    return transition_count / transversion_count


# Example usage
s1 = """CGAATCAGCTCCCAACCTATTGCGAGCTGCGTCGAACGGGAAGGACCGTGCGAAAACTCG
CTACCAGTTCCATAATGTCGTGGGGAACACTTTCGTATACCATGCAAGCTTCTTCCCTTG
GTACACCGGTTCCCGCTCCGACCGACAAGGATGGTCTCACGCGATAAAGTCAACTATAGA
TCTACCACCTGTAAGTCGACCTGCTACATCCGTGTCTAGCAGGTCTGGTGGTTGACTTCC
CTCAACCGGTGCGACTGTGAAGATTGTCGACGAATCCTTCGCACATCCATCGAGCTGGGG
TAGATTTCGGGAACTACCGTCCGTAGACGTCTGCTTCATTTTTCTTGGACTGCTACTAAC
GCCTATCACATGAATTTACTCAGATCGTAGGTATCACTCTAGGGTGGCACAGTGAAGTTC
CTTCCATTACTGCAGGCGTGCTAAACAGACCAACCCTGTGATCCTATGCGCATTCAATCC
GAAGTACTGGAGAGTGTATTGTCGTGCAAGCAAGAACGAGACGAGGTGCAACACGACTCC
GATCACGACCCCACCACTAGATTTATCCACAGCGGGACACACCCCCAGGTATAATAGTGA
ACTCGTATCACATCCTTAAAGTGAAGACGTCGACAATATCATGCGGGCTAAAGAGCAGAT
CTAAGCCCCATTTTTGATAATCGCCTCCAGGTTCACCGATTTCATCCCGTTGTATAAATC
CTGGGAGAGGCACACATACACCGTGGGGGAGTCCGTGTCAATGATCCATATACATGCCCA
CGGCGACCTTGACTATGCTATATTAGAAGAAAAGTGTTCCGAAATCTCCGGGAGGGAAGT
GAATGGCAAACGAAGTGATTATTCCAAAGGCCGTCGCTCAAAGGTCACGGCTTAAGGGGA
CTCGGCAAGTGCCTAAGCTTTCTCTAATGCGCTCCATTAATCGCCCTTATTGGTTGTGAA
AGAGTTCTACCTGTT"""
s2 = """TGAATCATCTCCCAGCCCATTGCAGACCGTGGCGTCCTGGAAAACTCGTGCGTGAGCCTG
CAACCACTCCCGCAACGTCGCGTCGAACAATTTCGTGTATCACGCAAGCTCCTTCCCCTA
GTACATTGGTTTCCTCTCTAACCTATAAGAACATTACTACGCTATAGAAACAACAACAAA
CCCATCACCTGTAAGTCGAACTGCCAAATTCATATATAGTAAGCCTGGTATTTGATCGCA
CTCAACCGCAGCTACCGTGAAAATTGTCGACGGATCATTTGGGCATCCAAAATGTTGGGA
TAGCCTTTGGGAATCGCCGTGAGTAGACGTCTACTTCATTTTCCTTGGTATGCTCCTTGC
CACTGTCACGCGAGGTTACTCAGTTGATAAGTATCAGTTTAGCGTGGTACGGTTAAGCTC
TACCTATTACTACAGACGTGCTAGACGGACCAGCCTTGTGGTCCTGTACGCACCGCAGCC
GAAGCATGGAAGGATGTGCTGTCGCTTGGGCAAGAAGGAGACGAGACGTGACCCGACTTC
GATCACGACCCTACCACTTGATCTGTTCCCGGGGGGACAAACCCACAGTTACAATAGTGA
ACCCGTCATTCAGCCCTAAGGCGAAGGCATCGATAGCGCCTCGCAATCCAAAAGGCGGAT
CTAAGTTTTGTTCTTGATAGCTAACTCCAGGTGTACCGATCTCATCCCGCAGTCTAGATC
CTAAGAGAGGTACGCGGGTGCTGTGGGAGAGTCCGCATTAATGGGCCATATACACGCCCA
CGACCACCTCGACCATGCCTTGATAGAAGAGAAGCCTTTCGAAATCTCCGGGGGGACTAT
GAATGGCGAGGAGTGTGATAGTACCAAAAACAGCCGCTCAGAGCTCCTGCCTTAAGGGGA
CTAGGCAAATGACTGAGCCTTACCTAACGCGCACCATCAATCGCCCTTATTGACTACGAG
AGAGTTTTGCCTAAT"""

result = transition_transversion_ratio(s1, s2)
print(f"Transition/Transversion Ratio: {result:.3f}")
